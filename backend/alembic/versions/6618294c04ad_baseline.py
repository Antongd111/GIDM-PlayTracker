"""baseline

Revision ID: 6618294c04ad
Revises: 
Create Date: 2025-08-24 17:58:53.229386

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6618294c04ad'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('friendships')
    op.alter_column('users', 'favorite_rawg_game_id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'favorite_rawg_game_id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.create_table('friendships',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id_a', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id_b', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('requester_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('pending', 'accepted', 'declined', 'blocked', name='friendship_status'), autoincrement=False, nullable=False),
    sa.Column('requested_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('responded_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('blocker_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.CheckConstraint("status <> 'blocked'::friendship_status OR blocker_id IS NOT NULL", name=op.f('chk_blocker_when_blocked')),
    sa.CheckConstraint('requester_id = user_id_a OR requester_id = user_id_b', name=op.f('chk_requester_in_pair')),
    sa.CheckConstraint('user_id_a < user_id_b', name=op.f('chk_pair_sorted')),
    sa.CheckConstraint('user_id_a <> user_id_b', name=op.f('chk_distinct_users')),
    sa.ForeignKeyConstraint(['blocker_id'], ['users.id'], name=op.f('friendships_blocker_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['requester_id'], ['users.id'], name=op.f('friendships_requester_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id_a'], ['users.id'], name=op.f('friendships_user_id_a_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id_b'], ['users.id'], name=op.f('friendships_user_id_b_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('friendships_pkey')),
    sa.UniqueConstraint('user_id_a', 'user_id_b', name=op.f('uq_friendships_pair_sorted'))
    )
    # ### end Alembic commands ###
